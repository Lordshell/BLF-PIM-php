<?php
/*
 * AKKBLFPIM23Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace AKKBLFPIM23Lib\Controllers;

use AKKBLFPIM23Lib\APIException;
use AKKBLFPIM23Lib\APIHelper;
use AKKBLFPIM23Lib\Configuration;
use AKKBLFPIM23Lib\Models;
use AKKBLFPIM23Lib\Exceptions;
use AKKBLFPIM23Lib\Http\HttpRequest;
use AKKBLFPIM23Lib\Http\HttpResponse;
use AKKBLFPIM23Lib\Http\HttpMethod;
use AKKBLFPIM23Lib\Http\HttpContext;
use AKKBLFPIM23Lib\Servers;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class MiscController extends BaseController
{
    /**
     * @var MiscController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return MiscController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * TODO: Add Description
     *
     * @param Models\AuthentificationByPasswordRequest $body         TODO: type description here
     * @param string                                   $contentType  TODO: type description here
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createAuthentificationByPassword(
        $body,
        $contentType
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::getBaseUri();
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oauth/v1/token';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken),
            'Content-Type'    => $contentType
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
    }

    /**
     * TODO: Add Description
     *
     * @param Models\AuthentificationByRefreshTokenRequest $body         TODO: type description here
     * @param string                                       $contentType  TODO: type description here
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createAuthentificationByRefreshToken(
        $body,
        $contentType
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::getBaseUri();
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/oauth/v1/token';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken),
            'Content-Type'    => $contentType
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
    }
}
