<?php
/*
 * AKKBLFPIM23Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace AKKBLFPIM23Lib\Tests;

use AKKBLFPIM23Lib\APIException;
use AKKBLFPIM23Lib\Exceptions;
use AKKBLFPIM23Lib\APIHelper;
use AKKBLFPIM23Lib\Models;

class MeasureFamily2XOnlyControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \AKKBLFPIM23Lib\Controllers\MeasureFamily2XOnlyController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \AKKBLFPIM23Lib\AKKBLFPIM23Client();
        self::$controller = $client->getMeasureFamily2XOnly();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Assuming that the given code is the code of an existing measure family
     */
    public function testMeasureFamily2XOnly()
    {

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getMeasureFamily2XOnly();
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testMeasureFamilies2XOnly()
    {

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->getMeasureFamilies2XOnly();
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}
