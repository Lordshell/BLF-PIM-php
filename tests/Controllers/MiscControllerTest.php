<?php
/*
 * AKKBLFPIM23Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace AKKBLFPIM23Lib\Tests;

use AKKBLFPIM23Lib\APIException;
use AKKBLFPIM23Lib\Exceptions;
use AKKBLFPIM23Lib\APIHelper;
use AKKBLFPIM23Lib\Models;

class MiscControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \AKKBLFPIM23Lib\Controllers\MiscController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \AKKBLFPIM23Lib\AKKBLFPIM23Client();
        self::$controller = $client->getMisc();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * TODO: Add Description
     */
    public function testAuthentificationByPassword()
    {
        // Parameters for the API call
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{"username":"{{username}}","password":"{{password}}","grant_type":"password"}'),
            'AKKBLFPIM23Lib\\Models\\AuthentificationByPasswordRequest'
        );
        $contentType = 'application/json';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->createAuthentificationByPassword($body, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }

    /**
     * TODO: Add Description
     */
    public function testAuthentificationByRefreshToken()
    {
        // Parameters for the API call
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{"refresh_token":"{{refreshToken}}","grant_type":"refresh_token"}'),
            'AKKBLFPIM23Lib\\Models\\AuthentificationByRefreshTokenRequest'
        );
        $contentType = 'application/json';

        // Set callback and perform API call
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            self::$controller->createAuthentificationByRefreshToken($body, $contentType);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );
    }
}
